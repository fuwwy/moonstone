{"meta":{"generator":"0.9.0","format":20,"date":1621210023341},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Moonstone [![NPM version](https://img.shields.io/npm/v/moonstone-wrapper.svg?style=flat-square&color=informational)](https://npmjs.com/package/moonstone-wrapper) [![Discord Server](https://img.shields.io/discord/839181209958350929?color=7289da&logo=discord&logoColor=white&style=flat-square)](https://discord.gg/eEm4ttXyym) [![NPM Downloads](https://img.shields.io/npm/dt/moonstone-wrapper.svg?style=flat-square&color=informational)](https://npmjs.com/package/moonstone-wrapper)\n\nA simple, standalone, [dogehouse.tv](https://dogehouse.tv/) API wrapper\n\n<!-- GETTING STARTED -->\n\n## Installing\n\nYou will need NodeJS and NPM. To install moonstone on your local project, run:\n\n```\nnpm install --no-optional --production moonstone-wrapper\n```\n\n**If you need audio support, remove the `--no-optional`.**\n\n<!-- USAGE EXAMPLES -->\n\n## Usage\n\nYou can use the example from below to see how you can use moonstone.\n\n## Ping Pong Example\n\n```js\nconst Moonstone = require(\"moonstone-wrapper\");\n\nvar bot = Moonstone(\"TOKEN\"); // Replace TOKEN with your bot account's token\n\nbot.on(\"ready\", async () => {\n  // When the bot is ready\n  console.log(`Ready! Logged in as ${bot.user.username}`); // Log \"Ready!\"\n  const topRooms = await bot.getTopRooms(); // Grab the top rooms\n  bot.joinRoom(topRooms[0]); // Join the top room\n});\n\nbot.on(\"newChatMsg\", (msg) => {\n  // When a message is created\n  if (msg.content === \"!ping\") {\n    // If the message content is \"!ping\"\n    msg.room.sendChatMessage(\"Pong!\"); // Send a message in the same channel with \"Pong!\"\n  } else if (msg.content === \"!pong\") {\n    // Otherwise, if the message is \"!pong\"\n    msg.user.sendWhisper(\"Ping!\"); // Whisper to the user with \"Ping!\"\n  }\n});\n\nbot.connect(); // Get the bot to connect to Dogehouse\n```\n\nMore examples can be found in [the examples folder](https://github.com/fuwwy/moonstone/tree/main/examples).\n\n- [Welcomer Example](https://github.com/fuwwy/moonstone/blob/main/examples/welcomer.js)\n- [Music Example](https://github.com/fuwwy/moonstone/blob/main/examples/music.js)\n\n## Support\n\nYou can find help on the [official support server](https://discord.gg/hDj42dMhn9).\n\n<!-- LICENSE -->\n\n## License\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<!-- If you are a Contributor then add your name to the list below -->\n\n## Contributors\n\n- [fuwwy](https://github.com/fuwwy)\n- [Isaiah-Hamilton](https://github.com/Isaiah-Hamilton)\n- [1chiSensei](https://github.com/1chiSensei)\n","path":"docs/general/welcome.md"},"botAccount":{"name":"How to create a bot account","type":"md","content":"## How to create a bot account\n\n- First, you're gonna need to instatiate the client using your personal account tokens.\n  ```js\n  const Moonstone = require(\"moonstone-wrapper\");\n  const bot = Moonstone({\n    accessToken: \"TOKEN\",\n    refreshToken: \"REFRESH_TOKEN\"\n  });\n  ```\n\n  Replace TOKEN with your token and REFRESH_TOKEN with your refresh token from [dogehouse.tv](dogehouse.tv). If you don't know how to get your tokens, then check [How to get your tokens](http://moonstone.folf.party/#/main/main/general/tokens).\n\n- Next, we'll create a ready listener, and call [createBotAccount](https://moonstone.folf.party/#/main/main/class/Moonstone?scrollTo=createBotAccount) with our new bot username. Lastly, we'll tell the bot to connect to Dogehouse.\n\n  ```js\n  bot.on(\"ready\", async (user) => {\n    console.log(\"Ready! Logged in as \" + user.username);\n\n    const botAccountData = await bot.createBotAccount(\"BOT_USERNAME\");\n    console.log(botAccountData);\n  });\n\n  bot.connect(); // Connect the bot to Dogehouse\n  ```\n\n- Finally, just run your file (`node file.js`), and your token (or creation error) should be printed out to the console.","path":"docs/general/botAccount.md"},"tokens":{"name":"How to get your personal tokens","type":"md","content":"# How to get your Tokens\n\n<br>\n\n- First you will have to go to [dogehouse.tv](dogehouse.tv), and right click anywhere and press inspect.\n\n<img src=\"https://raw.githubusercontent.com/fuwwy/moonstone/main/docs/general/img/1.png\">\n\n<br>\n<br>\n\n- Second you will have to go to application tab\n\n<img src=\"https://raw.githubusercontent.com/fuwwy/moonstone/main/docs/general/img/2.png\">\n\n<br>\n<br>\n\n- Thrid you will have to go to local storage and both your token and refresh-token will be there.\n\n<img src=\"https://raw.githubusercontent.com/fuwwy/moonstone/main/docs/general/img/3.png\">\n\n<br>\n<br>","path":"docs/general/tokens.md"}}},"examples":{"name":"Examples","files":{"createBotAccount":{"name":"Create bot account","type":"js","content":"const Moonstone = require(\"moonstone-wrapper\");\n\n// [How to get your tokens](http://moonstone.folf.party/#/main/main/general/tokens).\nvar bot = Moonstone({\n  accessToken: \"...\",\n  refreshToken: \"...\",\n});\n\nbot.on(\"ready\", async (user) => {\n  console.log(\"Ready! Logged in as \" + user.username);\n\n  const botAccountData = await bot.createBotAccount(\"testbotusername\");\n  console.log(botAccountData);\n});\n\nbot.connect(); // Connect the bot to Dogehouse\n","path":"docs/examples/createBotAccount.js"},"welcomer":{"name":"Room greeting","type":"js","content":"\n/**\n * A bot that welcomes new room members when they join.\n */\n\n// Import moonstone\nconst Moonstone = require(\"moonstone-wrapper\");\n\n// Create an instance of a Moonstone client\nvar bot = Moonstone(\"BOT_TOKEN\");\n\nbot.on(\"ready\", async (user) => {\n  // Log to the console the username that was logged in as.\n  console.log(\"Ready! Logged in as \" + user.username);\n\n  // Grab the current Dogehouse top rooms.\n  const topRooms = await bot.getTopRooms();\n  // Join the first one in the list\n  await bot.joinRoom(topRooms[0]); \n});\n\nbot.on(\"userJoinRoom\", async (user, room) => {\n  // Send a whisper to the user, welcoming them to the room.\n  await user.sendWhisper(\"Hi, welcome to \" + room.name + \"!\");\n});\n\n// Connect the bot to Dogehouse\nbot.connect(); \n","path":"docs/examples/welcomer.js"},"music":{"name":"Music","type":"js","content":"const Moonstone = require(\"moonstone-wrapper\");\nconst ytdl = require(\"ytdl-core-discord\");\nconst bot = Moonstone(\"BOT_TOKEN\");\n\nbot.on(\"ready\", async (user) => {\n  console.log(\"Ready! Logged in as \" + user.username);\n  const topRooms = await bot.getTopRooms();\n  console.log(\"There are \" + topRooms.length + \" available rooms.\");\n\n  const foundRooms = topRooms.filter(\n    (room) => room.creatorId == \"ae738cee-f431-4033-b0da-025d44fce6b8\" // Filter for rooms created by a specific user\n  );\n\n  // If the filter found a room, join it, otherwise create one.\n  const room =\n    foundRooms.length > 0\n      ? foundRooms[0]\n      : await bot.createRoom({\n          name: \"Music Bot\",\n          description:\n            \"Powered by Moonstone | https://github.com/fuwwy/moonstone\",\n          privacy: \"public\",\n        });\n  await bot.joinRoom(room); // Join room\n});\n\n// Send a message when first joining a room.\nbot.on(\"joinedRoom\", async (room) => {\n  await room.sendChatMessage(\"Hi, I'm a music bot :D\");\n  await room.sendChatMessage(\"Type !help to see all my commands.\");\n});\n\n// Send message to users who join the room\nbot.on(\"userJoinRoom\", async (user, room) => {\n  await user.sendWhisper(\n    \"Hi, welcome to the room! Type !help to see all my commands.\"\n  );\n});\n\nconst isPlayingMusic = (room) => {\n  return (\n    room.audioConnection &&\n    room.audioConnection.player &&\n    room.audioConnection.player.dispatcher\n  );\n};\n\n// List of commands\nconst commandList = bot.buildChatMessage((b) =>\n  b\n    .text(\"Here's a list of commands:\")\n    .text(\"!play <url> - Play a song from youtube.\")\n    .text(\"!pause - Pause or resume the player.\")\n    .text(\"!volume <volume> - Set the player volume (0-2)\")\n);\n\n// Listen for chat messages\nbot.on(\"newChatMsg\", async (msg) => {\n  // Command parser\n  if (msg.content.startsWith(\"!\")) {\n    const command = msg.content.includes(\" \")\n      ? msg.content.split(\" \")[0]\n      : msg.content;\n    const args = msg.content.includes(\" \")\n      ? msg.content.split(\" \").slice(1)\n      : [];\n\n    switch (command.substring(1)) {\n\n      // Responds with List of commands\n      case \"help\":\n        await msg.user.sendWhisper(commandList);\n        break;\n      \n      // Plays music from youtube url\n      case \"play\":\n        if (args.length < 1)\n          return await msg.room.sendChatMessage(\"Invalid url\");\n        const url = args[0];\n        await msg.room.sendChatMessage((b) =>\n          b.text(\"Playing\").url(url).text(\"...\")\n        );\n        playFromUrl(msg.room, url);\n        break;\n      \n      // Pauses current playing music\n      case \"pause\":\n        if (!isPlayingMusic(msg.room))\n          return msg.room.sendChatMessage(\"Not playing anything.\");\n\n        if (!msg.room.audioConnection.player.dispatcher.paused)\n          msg.room.audioConnection.player.dispatcher.pause();\n        else msg.room.audioConnection.player.dispatcher.resume();\n\n        break;\n      \n      // Changes the volume of music\n      case \"volume\":\n        if (!isPlayingMusic(msg.room))\n          return msg.room.sendChatMessage(\"Not playing anything.\");\n\n        if (args.length < 1)\n          return await msg.room.sendChatMessage(\"Invalid volume\");\n        const volume = parseInt(args[0]);\n        if (volume > 2 || volume < 0)\n          return await msg.room.sendChatMessage(\"Invalid volume\");\n\n        msg.room.audioConnection.player.dispatcher.setVolume(volume); // Set music volume\n        break;\n\n      // Responds with: Unknown command\n      default:\n        await msg.room.sendChatMessage(\"Unknown command.\");\n        break;\n    }\n  }\n});\n\nconst playFromUrl = async (room, url) => {\n  // Asks for speakers permisions\n  if (!room.selfUser.isSpeaker) {\n    await room.sendChatMessage(\n      \"I need to be a speaker in order to play music.\"\n    );\n    if (!room.selfUser.roomPermissions.askedToSpeak) await room.askToSpeak();\n    return;\n  }\n  let stream;\n  try {\n    stream = await ytdl(url);\n  } catch (e) {\n    await room.sendChatMessage(\"Failed to get video: \" + e.message);\n  }\n  if (!stream) return;\n  const audioConnection = await room.connect(); // Connect to the room voice server (or grab it, if already connected.)\n  audioConnection.play(stream, { type: \"opus\" }); // Play opus stream from youtube.\n};\n\nbot.connect();\n","path":"docs/examples/music.js"}}}},"classes":[{"name":"Moonstone","description":"Represents the main Moonstone client","extends":[[["EventEmitter"]]],"construct":{"name":"Moonstone","description":"Create an instance of Moonstone","params":[{"name":"token","description":"Either the bot token or an object containing an access and refresh token","type":[[["String"]],[["Object"]]]},{"name":"token.accessToken","description":"A dogehouse access token","optional":true,"type":[[["String"]]]},{"name":"token.refreshToken","description":"A dogehouse refresh token","optional":true,"type":[[["String"]]]},{"name":"options","description":"Moonstone client options","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"This client's options","type":[[["ClientOptions"]]],"meta":{"line":50,"file":"Moonstone.js","path":"lib"}},{"name":"rooms","description":"The rooms this client is aware of","type":[[["Collection","<"],["Room",">"]]],"meta":{"line":67,"file":"Moonstone.js","path":"lib"}},{"name":"latency","description":"The current latency between moonstone and Dogehouse, in milliseconds","type":[[["number"]]],"meta":{"line":135,"file":"Moonstone.js","path":"lib"}},{"name":"user","description":"The current bot user","type":[[["User"]]],"meta":{"line":217,"file":"Moonstone.js","path":"lib"}}],"methods":[{"name":"connect","description":"Attempts to connect to Dogehouse","meta":{"line":75,"file":"Moonstone.js","path":"lib"}},{"name":"getTopRooms","description":"Get the top dashboard rooms","params":[{"name":"cursor","description":"The pagination cursor","optional":true,"default":0,"type":[[["Number"]]]}],"returns":[[["Promise","<"],["Array","<"],["Room",">>"]]],"meta":{"line":551,"file":"Moonstone.js","path":"lib"}},{"name":"joinRoom","description":"Joins a room","params":[{"name":"room","description":"The room to join","type":[[["Room"]]]}],"returns":[[["Promise","<"],["ActiveRoom",">"]]],"meta":{"line":568,"file":"Moonstone.js","path":"lib"}},{"name":"createRoom","description":"Creates a room","params":[{"name":"options","description":"The room options","type":[[["Object"]]]},{"name":"options.name","description":"The room name","type":[[["String"]]]},{"name":"options.description","description":"The room description","optional":true,"type":[[["String"]]]},{"name":"options.privacy","description":"The room privacy","optional":true,"type":[[["String"]]]}],"returns":[[["Promise","<"],["Room",">"]]],"meta":{"line":593,"file":"Moonstone.js","path":"lib"}},{"name":"createBotAccount","description":"Creates a bot account","params":[{"name":"username","description":"The new bot account username","type":[[["String"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":611,"file":"Moonstone.js","path":"lib"}},{"name":"setRole","description":"Sets a user's role in the current room.","params":[{"name":"role","description":"The role to set the user as (raised_hand/listener/speaker)","type":[[["string"]]]},{"name":"user","description":"The user to set the role on, defaults to self.","optional":true,"type":[[["User"]]]}],"returns":[[["Promise"]]],"meta":{"line":667,"file":"Moonstone.js","path":"lib"}},{"name":"sendChatMessage","description":"Sends a chat message in the current room.","params":[{"name":"content","description":"Message content","type":[[["String"]],[["function"]],[["Object"]]]},{"name":"whisperedTo","description":"A list of users to whisper the message to","optional":true,"type":[[["Array","<"],["User",">"]]]}],"meta":{"line":723,"file":"Moonstone.js","path":"lib"}},{"name":"setSpeaking","description":"Sets whether the bot is speaking or not (red circle around picture)","params":[{"name":"value","description":"Whether the bot is speaking or not.","type":[[["Boolean"]]]}],"meta":{"line":742,"file":"Moonstone.js","path":"lib"}},{"name":"setUserAuthLevel","description":"Sets a user's auth level","params":[{"name":"user","description":"The user to apply the change on","type":[[["ActiveUser"]]]},{"name":"authLevel","description":"The new auth level, either `user`, `mod`, or `owner`","type":[[["string"]]]}],"meta":{"line":751,"file":"Moonstone.js","path":"lib"}},{"name":"editSelf","description":"Edits properties of the user","params":[{"name":"options","description":"The properties to edit","type":[[["Object"]]]},{"name":"options.username","description":"The new username","optional":true,"type":[[["String"]]]},{"name":"options.displayName","description":"The new display name","optional":true,"type":[[["String"]]]},{"name":"options.avatarUrl","description":"The new avatar url","optional":true,"type":[[["String"]]]},{"name":"options.bannerUrl","description":"The new banner url","optional":true,"type":[[["String"]]]},{"name":"options.bio","description":"The new bio","optional":true,"type":[[["String"]]]}],"meta":{"line":773,"file":"Moonstone.js","path":"lib"}}],"events":[{"name":"ready","description":"Fired when the connection is established","params":[{"name":"user","description":"The bot user","type":[[["User"]]]}],"meta":{"line":235,"file":"Moonstone.js","path":"lib"}},{"name":"newTokens","description":"Fired when new auth tokens are sent by the server.","params":[{"name":"tokens","description":"New auth data","type":[[["Object"]]]}],"meta":{"line":248,"file":"Moonstone.js","path":"lib"}},{"name":"joinedRoom","description":"Fired when the bot joins a room.","params":[{"name":"room","description":"The joined room","type":[[["ActiveRoom"]]]}],"meta":{"line":260,"file":"Moonstone.js","path":"lib"}},{"name":"userJoinRoom","description":"Fired when a user joins the room the bot is in.","params":[{"name":"user","description":"The user who joined","type":[[["ActiveUser"]]]},{"name":"room","description":"The room","type":[[["ActiveRoom"]]]}],"meta":{"line":276,"file":"Moonstone.js","path":"lib"}},{"name":"userLeftRoom","description":"Fired when a user leaves the room the bot is in.","params":[{"name":"user","description":"The user who left","type":[[["ActiveUser"]]]},{"name":"room","description":"The room","type":[[["ActiveRoom"]]]}],"meta":{"line":291,"file":"Moonstone.js","path":"lib"}},{"name":"activeSpeakerChange","description":"Fired when a user starts or stops speaking","params":[{"name":"user","description":"The user whose state changed.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room","type":[[["ActiveRoom"]]]}],"meta":{"line":306,"file":"Moonstone.js","path":"lib"}},{"name":"muteChange","description":"Fired when a user mutes or unmutes their microphone.","params":[{"name":"user","description":"The user whose state changed.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room","type":[[["ActiveRoom"]]]}],"meta":{"line":315,"file":"Moonstone.js","path":"lib"}},{"name":"deafenChange","description":"Fired when a user deafens or undeafens their headphones.","params":[{"name":"user","description":"The user whose state changed.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room","type":[[["ActiveRoom"]]]}],"meta":{"line":324,"file":"Moonstone.js","path":"lib"}},{"name":"newChatMsg","description":"Fired when a new chat message is received.","params":[{"name":"message","description":"The received message.","type":[[["Message"]]]}],"meta":{"line":354,"file":"Moonstone.js","path":"lib"}},{"name":"joinAsPeer","description":"Fired when the bot join a room as peer (listener).","params":[{"name":"room","description":"The joined room.","type":[[["ActiveRoom"]]]},{"name":"voiceDataCache","description":"Information regarding voice connections.","type":[[["Object"]]]}],"meta":{"line":380,"file":"Moonstone.js","path":"lib"}},{"name":"joinedAsSpeaker","description":"Fired when the bot join a room as speaker.","params":[{"name":"room","description":"The joined room.","type":[[["Room"]]]},{"name":"voiceDataCache","description":"Information regarding voice connections.","type":[[["Object"]]]}],"meta":{"line":402,"file":"Moonstone.js","path":"lib"}},{"name":"becameSpeaker","description":"Fired when the bot becomes a speaker in a room.","params":[{"name":"room","description":"The room where the bot became a speaker.","type":[[["ActiveRoom"]]]},{"name":"voiceDataCache","description":"Information regarding voice connections.","type":[[["Object"]]]}],"meta":{"line":419,"file":"Moonstone.js","path":"lib"}},{"name":"handRaised","description":"Fired when a user raises their hand.","params":[{"name":"user","description":"The user who raised their hand.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room in context.","type":[[["ActiveRoom"]]]}],"meta":{"line":436,"file":"Moonstone.js","path":"lib"}},{"name":"speakerAdded","description":"Fired when a user is added as a speaker.","params":[{"name":"user","description":"The user who was added as a speaker.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room in context.","type":[[["ActiveRoom"]]]}],"meta":{"line":452,"file":"Moonstone.js","path":"lib"}},{"name":"speakerRemoved","description":"Fired when a user is removed as a speaker.","params":[{"name":"user","description":"The user who was removed as a speaker.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room in context.","type":[[["ActiveRoom"]]]}],"meta":{"line":470,"file":"Moonstone.js","path":"lib"}},{"name":"leftRoom","description":"Fired when the bot leaves a room.","params":[{"name":"room","description":"The room the bot left from.","type":[[["ActiveRoom"]]]},{"name":"kicked","description":"Whether the bot was kicked from the room.","type":[[["Boolean"]]]}],"meta":{"line":486,"file":"Moonstone.js","path":"lib"}},{"name":"modChange","description":"Fired when a user's moderator permission changes.","params":[{"name":"user","description":"The updated user.","type":[[["ActiveUser"]]]},{"name":"room","description":"The room in context.","type":[[["ActiveRoom"]]]}],"meta":{"line":502,"file":"Moonstone.js","path":"lib"}}],"meta":{"line":18,"file":"Moonstone.js","path":"lib"}},{"name":"AudioConnection","description":"Represents an audio connection","extends":[[["EventEmitter"]]],"props":[{"name":"player","description":"The current audio player","nullable":true,"type":[[["AudioPlayer"]]],"meta":{"line":45,"file":"AudioConnection.js","path":"lib/audio"}}],"methods":[{"name":"play","description":"Play an audio resource.","examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.voice.createBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play","type":[[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["AudioDispatcher"]]],"meta":{"line":69,"file":"AudioConnection.js","path":"lib/audio"}},{"name":"setSpeaking","description":"Set the client speaking state","params":[{"name":"speaking","type":[[["Boolean"]]]}],"async":true,"meta":{"line":101,"file":"AudioConnection.js","path":"lib/audio"}}],"meta":{"line":20,"file":"AudioConnection.js","path":"lib/audio"}},{"name":"VolumeInterface","description":"An interface class for volume transformation.","extends":[[["EventEmitter"]]],"props":[{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"VolumeInterface.js","path":"lib/audio"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":27,"file":"VolumeInterface.js","path":"lib/audio"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":36,"file":"VolumeInterface.js","path":"lib/audio"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":45,"file":"VolumeInterface.js","path":"lib/audio"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":70,"file":"VolumeInterface.js","path":"lib/audio"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":85,"file":"VolumeInterface.js","path":"lib/audio"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":93,"file":"VolumeInterface.js","path":"lib/audio"}}],"events":[{"name":"volumeChange","description":"Emitted when the volume of this interface changes.","params":[{"name":"oldVolume","description":"The old volume of this interface","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this interface","type":[[["number"]]]}],"meta":{"line":71,"file":"VolumeInterface.js","path":"lib/audio"}}],"meta":{"line":7,"file":"VolumeInterface.js","path":"lib/audio"}},{"name":"ActiveRoom","description":"Represents a room that you are connected to","extends":[[["Room"]]],"props":[{"name":"users","description":"The users in this room","type":[[["Collection","<"],["ActiveUser",">"]]],"meta":{"line":19,"file":"ActiveRoom.js","path":"lib/core"}},{"name":"autoSpeaker","description":"Whether you automatically become a speaker when you ask to speak","type":[[["boolean"]]],"meta":{"line":33,"file":"ActiveRoom.js","path":"lib/core"}},{"name":"selfUser","description":"The current bot user in this room","type":[[["ActiveUser"]]],"meta":{"line":119,"file":"ActiveRoom.js","path":"lib/core"}},{"name":"name","description":"The name of the room","type":[[["string"]]],"meta":{"line":16,"file":"Room.js","path":"lib/core"}},{"name":"description","description":"The description of the room","type":[[["string"]]],"meta":{"line":24,"file":"Room.js","path":"lib/core"}},{"name":"isPrivate","description":"Whether the room is private","type":[[["boolean"]]],"meta":{"line":32,"file":"Room.js","path":"lib/core"}},{"name":"creatorId","description":"The id of the room creator","type":[[["string"]]],"meta":{"line":40,"file":"Room.js","path":"lib/core"}},{"name":"insertedAt","description":"The date and time at which the room was added","type":[[["string"]]],"meta":{"line":48,"file":"Room.js","path":"lib/core"}}],"methods":[{"name":"askToSpeak","description":"Sets your role as raised hand","async":true,"returns":[[["Promise"]]],"meta":{"line":89,"file":"ActiveRoom.js","path":"lib/core"}},{"name":"sendChatMessage","description":"Sends a chat message","params":[{"name":"content","description":"The message content","type":[[["String"]],[["function"]],[["Object"]]]}],"async":true,"returns":[[["Promise"]]],"meta":{"line":98,"file":"ActiveRoom.js","path":"lib/core"}},{"name":"connect","description":"Connects to the room's audio server","async":true,"returns":[[["Promise","<"],["AudioConnection",">"]]],"meta":{"line":106,"file":"ActiveRoom.js","path":"lib/core"}}],"meta":{"line":11,"file":"ActiveRoom.js","path":"lib/core"}},{"name":"ActiveUser","description":"Represents an active (joined) room","extends":[[["User"]]],"construct":{"name":"ActiveUser","params":[{"name":"data","description":"The data for the user","type":[[["Object"]]]},{"name":"room","description":"The room the user belongs to","type":[[["ActiveRoom"]]]},{"name":"client","description":"The client that controls this user","type":[[["Moonstone"]]]}]},"props":[{"name":"room","description":"The room this user object belongs to","type":[[["ActiveRoom"]]],"meta":{"line":38,"file":"ActiveUser.js","path":"lib/core"}},{"name":"voiceState","description":"The voice state of the user","type":[[["VoiceState"]]],"meta":{"line":44,"file":"ActiveUser.js","path":"lib/core"}},{"name":"roomPermissions","description":"The permissions the user has in the room","type":[[["RoomPermissions"]]],"meta":{"line":50,"file":"ActiveUser.js","path":"lib/core"}},{"name":"isCreator","description":"Whether the user is the creator of the room they're in","type":[[["boolean"]]],"meta":{"line":97,"file":"ActiveUser.js","path":"lib/core"}},{"name":"isSpeaker","description":"Whether the user is currently a speaker","type":[[["boolean"]]],"meta":{"line":105,"file":"ActiveUser.js","path":"lib/core"}},{"name":"id","description":"The id of the user","type":[[["string"]]],"meta":{"line":14,"file":"User.js","path":"lib/core"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":20,"file":"User.js","path":"lib/core"}},{"name":"avatarUrl","description":"The url of the user avatar","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"lib/core"}},{"name":"bannerUrl","description":"The url of the user banner","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"User.js","path":"lib/core"}},{"name":"bio","description":"The bio of the user","type":[[["string"]]],"meta":{"line":38,"file":"User.js","path":"lib/core"}},{"name":"online","description":"Whether the user is online","type":[[["boolean"]]],"meta":{"line":44,"file":"User.js","path":"lib/core"}},{"name":"lastOnline","description":"When the user was last online","type":[[["string"]]],"meta":{"line":50,"file":"User.js","path":"lib/core"}},{"name":"currentRoomId","description":"The id of the room the user is currently in","nullable":true,"type":[[["string"]]],"meta":{"line":56,"file":"User.js","path":"lib/core"}},{"name":"displayName","description":"The display name (full name) of the user","type":[[["string"]]],"meta":{"line":62,"file":"User.js","path":"lib/core"}},{"name":"numFollowing","description":"The number of people the user is following","type":[[["number"]]],"meta":{"line":68,"file":"User.js","path":"lib/core"}},{"name":"numFollowers","description":"The number of people the user is followed by","type":[[["number"]]],"meta":{"line":74,"file":"User.js","path":"lib/core"}},{"name":"youAreFollowing","description":"Whether you (the bot) are following this user","type":[[["boolean"]]],"meta":{"line":80,"file":"User.js","path":"lib/core"}},{"name":"followsYou","description":"Whether this user follows you (the bot).","type":[[["boolean"]]],"meta":{"line":86,"file":"User.js","path":"lib/core"}},{"name":"botOwnerId","description":"The id of the bot owner, in case this user is a bot.","nullable":true,"type":[[["string"]]],"meta":{"line":92,"file":"User.js","path":"lib/core"}}],"methods":[{"name":"sendWhisper","description":"Sends a whisper to the user","params":[{"name":"content","description":"The message content","type":[[["String"]],[["function"]],[["Object"]]]}],"async":true,"returns":[[["Promise"]]],"meta":{"line":65,"file":"ActiveUser.js","path":"lib/core"}},{"name":"setAsListener","description":"Sets the user's role as listener","async":true,"returns":[[["Promise"]]],"meta":{"line":73,"file":"ActiveUser.js","path":"lib/core"}},{"name":"setAsSpeaker","description":"Sets the user's role as speaker","async":true,"returns":[[["Promise"]]],"meta":{"line":81,"file":"ActiveUser.js","path":"lib/core"}},{"name":"setAuthLevel","description":"Sets the user's auth level","params":[{"name":"authLevel","description":"The new auth level, either `user`, `mod`, or `owner`","type":[[["string"]]]}],"meta":{"line":89,"file":"ActiveUser.js","path":"lib/core"}}],"meta":{"line":7,"file":"ActiveUser.js","path":"lib/core"}},{"name":"Message","description":"Represents a chat message","props":[{"name":"userId","description":"The id of the user who sent the message","type":[[["String"]]],"meta":{"line":11,"file":"Message.js","path":"lib/core"}},{"name":"room","description":"The room the message was sent in","type":[[["ActiveRoom"]]],"meta":{"line":17,"file":"Message.js","path":"lib/core"}},{"name":"tokens","description":"The tokens that make up the message","type":[[["Array","<"],["Object",">"]]],"meta":{"line":23,"file":"Message.js","path":"lib/core"}},{"name":"sentAt","description":"The date and time at which the message was sent","type":[[["String"]]],"meta":{"line":29,"file":"Message.js","path":"lib/core"}},{"name":"isWhisper","description":"Whether this message is a whisper","type":[[["boolean"]]],"meta":{"line":36,"file":"Message.js","path":"lib/core"}},{"name":"content","description":"The text (parsed) content of this message","type":[[["String"]]],"meta":{"line":42,"file":"Message.js","path":"lib/core"}},{"name":"user","description":"The user that sent this message","type":[[["ActiveUser"]]],"meta":{"line":66,"file":"Message.js","path":"lib/core"}}],"meta":{"line":5,"file":"Message.js","path":"lib/core"}},{"name":"Room","description":"Represents a room","props":[{"name":"name","description":"The name of the room","type":[[["string"]]],"meta":{"line":16,"file":"Room.js","path":"lib/core"}},{"name":"description","description":"The description of the room","type":[[["string"]]],"meta":{"line":24,"file":"Room.js","path":"lib/core"}},{"name":"isPrivate","description":"Whether the room is private","type":[[["boolean"]]],"meta":{"line":32,"file":"Room.js","path":"lib/core"}},{"name":"creatorId","description":"The id of the room creator","type":[[["string"]]],"meta":{"line":40,"file":"Room.js","path":"lib/core"}},{"name":"insertedAt","description":"The date and time at which the room was added","type":[[["string"]]],"meta":{"line":48,"file":"Room.js","path":"lib/core"}}],"meta":{"line":4,"file":"Room.js","path":"lib/core"}},{"name":"User","description":"Represents a user","construct":{"name":"User","params":[{"name":"data","description":"The data for the user","type":[[["Object"]]]}]},"props":[{"name":"id","description":"The id of the user","type":[[["string"]]],"meta":{"line":14,"file":"User.js","path":"lib/core"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":20,"file":"User.js","path":"lib/core"}},{"name":"avatarUrl","description":"The url of the user avatar","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"lib/core"}},{"name":"bannerUrl","description":"The url of the user banner","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"User.js","path":"lib/core"}},{"name":"bio","description":"The bio of the user","type":[[["string"]]],"meta":{"line":38,"file":"User.js","path":"lib/core"}},{"name":"online","description":"Whether the user is online","type":[[["boolean"]]],"meta":{"line":44,"file":"User.js","path":"lib/core"}},{"name":"lastOnline","description":"When the user was last online","type":[[["string"]]],"meta":{"line":50,"file":"User.js","path":"lib/core"}},{"name":"currentRoomId","description":"The id of the room the user is currently in","nullable":true,"type":[[["string"]]],"meta":{"line":56,"file":"User.js","path":"lib/core"}},{"name":"displayName","description":"The display name (full name) of the user","type":[[["string"]]],"meta":{"line":62,"file":"User.js","path":"lib/core"}},{"name":"numFollowing","description":"The number of people the user is following","type":[[["number"]]],"meta":{"line":68,"file":"User.js","path":"lib/core"}},{"name":"numFollowers","description":"The number of people the user is followed by","type":[[["number"]]],"meta":{"line":74,"file":"User.js","path":"lib/core"}},{"name":"youAreFollowing","description":"Whether you (the bot) are following this user","type":[[["boolean"]]],"meta":{"line":80,"file":"User.js","path":"lib/core"}},{"name":"followsYou","description":"Whether this user follows you (the bot).","type":[[["boolean"]]],"meta":{"line":86,"file":"User.js","path":"lib/core"}},{"name":"botOwnerId","description":"The id of the bot owner, in case this user is a bot.","nullable":true,"type":[[["string"]]],"meta":{"line":92,"file":"User.js","path":"lib/core"}}],"meta":{"line":4,"file":"User.js","path":"lib/core"}},{"name":"Collection","description":"Hold a bunch of something","extends":[[["Map"]]],"construct":{"name":"Collection","description":"Construct a Collection","params":[{"name":"baseObject","description":"The base class for all items","type":[[["Class"]]]},{"name":"limit","description":"Max number of items to hold","optional":true,"type":[[["Number"]]]}]},"props":[{"name":"baseObject","description":"The base class for all items","type":[[["Class"]]],"meta":{"line":19,"file":"Collection.js","path":"lib/utils"}},{"name":"limit","description":"Max number of items to hold","nullable":true,"type":[[["Number"]]],"meta":{"line":24,"file":"Collection.js","path":"lib/utils"}}],"methods":[{"name":"update","description":"Update an object","params":[{"name":"obj","description":"The updated object data","type":[[["Object"]]]},{"name":"obj.id","description":"The ID of the object","type":[[["String"]]]},{"name":"extra","description":"An extra parameter the constructor may need","optional":true,"type":[[["Class"]]]},{"name":"replace","description":"Whether to replace an existing object with the same ID","optional":true,"type":[[["Boolean"]]]}],"returns":{"types":[[["Class"]]],"description":"The updated object"},"meta":{"line":35,"file":"Collection.js","path":"lib/utils"}},{"name":"add","description":"Add an object","params":[{"name":"obj","description":"The object data","type":[[["Object"]]]},{"name":"obj.id","description":"The ID of the object","type":[[["String"]]]},{"name":"extra","description":"An extra parameter the constructor may need","optional":true,"type":[[["Class"]]]},{"name":"replace","description":"Whether to replace an existing object with the same ID","optional":true,"type":[[["Boolean"]]]}],"returns":{"types":[[["Class"]]],"description":"The existing or newly created object"},"meta":{"line":55,"file":"Collection.js","path":"lib/utils"}},{"name":"every","description":"Returns true if all elements satisfy the condition","params":[{"name":"func","description":"A function that takes an object and returns true or false","type":[[["function"]]]}],"returns":{"types":[[["Boolean"]]],"description":"Whether or not all elements satisfied the condition"},"meta":{"line":94,"file":"Collection.js","path":"lib/utils"}},{"name":"filter","description":"Return all the objects that make the function evaluate true","params":[{"name":"func","description":"A function that takes an object and returns true if it matches","type":[[["function"]]]}],"returns":{"types":[[["Array","<"],["Class",">"]]],"description":"An array containing all the objects that matched"},"meta":{"line":108,"file":"Collection.js","path":"lib/utils"}},{"name":"find","description":"Return the first object to make the function evaluate true","params":[{"name":"func","description":"A function that takes an object and returns true if it matches","type":[[["function"]]]}],"returns":{"types":[[["Class"]]],"description":"The first matching object, or undefined if no match","nullable":true},"meta":{"line":123,"file":"Collection.js","path":"lib/utils"}},{"name":"map","description":"Return an array with the results of applying the given function to each element","params":[{"name":"func","description":"A function that takes an object and returns something","type":[[["function"]]]}],"returns":{"types":[[["Array"]]],"description":"An array containing the results"},"meta":{"line":137,"file":"Collection.js","path":"lib/utils"}},{"name":"random","description":"Get a random object from the Collection","returns":{"types":[[["Class"]]],"description":"The random object, or undefined if there is no match","nullable":true},"meta":{"line":149,"file":"Collection.js","path":"lib/utils"}},{"name":"reduce","description":"Returns a value resulting from applying a function to every element of the collection","params":[{"name":"func","description":"A function that takes the previous value and the next item and returns a new value","type":[[["function"]]]},{"name":"initialValue","description":"The initial value passed to the function","optional":true,"type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"The final result"},"meta":{"line":164,"file":"Collection.js","path":"lib/utils"}},{"name":"remove","description":"Remove an object","params":[{"name":"obj","description":"The object","type":[[["Object"]]]},{"name":"obj.id","description":"The ID of the object","type":[[["String"]]]}],"returns":{"types":[[["Class"]]],"description":"The removed object, or null if nothing was removed","nullable":true},"meta":{"line":180,"file":"Collection.js","path":"lib/utils"}},{"name":"some","description":"Returns true if at least one element satisfies the condition","params":[{"name":"func","description":"A function that takes an object and returns true or false","type":[[["function"]]]}],"returns":{"types":[[["Boolean"]]],"description":"Whether or not at least one element satisfied the condition"},"meta":{"line":194,"file":"Collection.js","path":"lib/utils"}}],"meta":{"line":7,"file":"Collection.js","path":"lib/utils"}}],"interfaces":[],"typedefs":[{"name":"ClientOptions","type":[[["Object"]]],"params":[{"name":"socketUrl","description":"The dogehouse socket url","optional":true,"type":[[["String"]]]},{"name":"autoReconnect","description":"Whether moonstone should auto reconnect automatically","optional":true,"type":[[["Boolean"]]]},{"name":"connectionTimeout","description":"How long in milliseconds to wait for an answer from the server","optional":true,"type":[[["Number"]]]},{"name":"callbackTimeout","description":"How long in milliseconds to wait for a fetch reply from the server.","optional":true,"type":[[["Number"]]]},{"name":"logUnhandledPackets","description":"Log packets that aren't handled by the event listener (debug).","optional":true,"type":[[["Boolean"]]]},{"name":"pingInterval","description":"How often in milliseconds to ping Dogehouse and calculate latency, will disconnect if over 8000.","optional":true,"type":[[["Number"]]]}],"meta":{"line":19,"file":"Moonstone.js","path":"lib"}},{"name":"VoiceState","description":"The voice state of a user","type":[[["Object"]]],"props":[{"name":"deafened","description":"Whether the user is deafened","type":[[["boolean"]]]},{"name":"muted","description":"Whether the user is muted","type":[[["boolean"]]]},{"name":"speaking","description":"Whether the user is currently speaking","type":[[["boolean"]]]}],"meta":{"line":9,"file":"ActiveUser.js","path":"lib/core"}},{"name":"RoomPermissions","description":"The permissions of a user in a room","type":[[["Object"]]],"params":[{"name":"isSpeaker","description":"Whether the user has been added as a speaker","type":[[["boolean"]]]},{"name":"askedToSpeak","description":"Whether the user has asked to speak","type":[[["boolean"]]]},{"name":"isMod","description":"Whether the user is a moderator","type":[[["boolean"]]]}],"meta":{"line":17,"file":"ActiveUser.js","path":"lib/core"}}],"externals":[]}